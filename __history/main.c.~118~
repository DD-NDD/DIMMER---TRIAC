#include <main.h>
#include <stdint.h>
#include <stdbool.h>
#byte OPTION_REG = GETENV("SFR:OPTION_REG")
#bit  INTEDG = OPTION_REG.6
int1 ZC = 0;
unsigned int16 level[10] = {9000,8000,7000,6000,5000,4000,3000,2000,1000,0};
unsigned int8 i=0;
#define UP_SWITCH_PIN       PIN_B2
#define ON_OFF_SWITCH_PIN   PIN_B3
#define DOWN_SWITCH_PIN     PIN_B4
#define MODE_SWITCH_PIN      PIN_B5

#define HAND_MODE 0
#define AUTO_MODE 1
#define ON_STATE 1
#define OFF_STATE 0

bool STATE = 0;
bool MODE = 0;
TICK_TYPE GetTickDifference(TICK_TYPE currTick, TICK_TYPE prevTick)
{
   return(currTick-prevTick);
}
unsigned int8 check_limit(uint8_t level_check)
{  
   if(level_check <= 0 ) level_check = 0;
   else if(level_check >=9 ) level_check = 9;
   
   return level_check;
}
void tick(void)
{
   if(input(ON_OFF_SWITCH_PIN) == 0) // nut on off duoc nhan
   {
      STATE = !STATE; // dao nguoc trang thai on off
      delay_ms(500); // delay 500ms
   }
   
   if(STATE == ON_STATE) // khi dang trong trang thai bat
   {
      if(input(MODE_SWITCH_PIN) == 0) // khi nut MODE duoc nhan
      {
         MODE = !MODE; // dao nguoc trang thai nhan
         if(MODE == HAND_MODE) // hien thi trang thai den AUTO - HAND
         {
            output_high(LED10);
            
         }
         else if(MODE == AUTO_MODE)
         {
            output_low(LED10);
         }
         delay_ms(500);
      }
      
      if(MODE == HAND_MODE) // khi che do bang tay
      {
         if( input(UP_SWITCH_PIN) == 0 ) // nut nhan tang
         {
            i++;  // tang level
         }
         else if( input(DOWN_SWITCH_PIN) == 0 ) // nhut nhan giam
         {
            i--; // giam level
         }
      }
      else if(MODE == AUTO_MODE) // che do auto
      {
         
      }
   }
   else if(STATE == OFF_STATE) // khi trang thai tat
   {
      // khong lam gi ca
      break;
   }
}

#INT_EXT
void  EXT_isr(void) 
{
   
   ZC = 1;
   if(INTEDG) INTEDG = 0;
  else       INTEDG = 1;
}
void led_display(uint8_t level)
{
   switch(level)
   {
      case 0: {output_c(0x00); output_low(LED9); break;}
      case 1: {output_c(0x00); output_high(LED9); break;}
      case 2: {output_c(0x01); output_high(LED9); break;}
      case 3: {output_c(0x03); output_high(LED9); break;}
      case 4: {output_c(0x07); output_high(LED9);  break;}
      case 5: {output_c(0x0f); output_high(LED9);  break;}
      case 6: {output_c(0x8f); output_high(LED9);  break;}
      case 7: {output_c(0xCf); output_high(LED9);   break;}
      case 8: {output_c(0xEf); output_high(LED9);   break;}
      case 9: {output_c(0xff); output_high(LED9);   break;}
      default: break;
   }
}



void main()
{
   TICK_TYPE CurrentTick,PreviousTick;
   CurrentTick = PreviousTick = get_ticks();
   enable_interrupts(INT_EXT);
   enable_interrupts(GLOBAL);
   STATE = OFF_STATE;
   MODE = AUTO_MODE;
   while(TRUE)
   {
      CurrentTick = get_ticks();
      if(GetTickDifference(CurrentTick, PreviousTick) >= ((TICK_TYPE)TICKS_PER_SECOND*100)/1000)
      {
         tick();
         PreviousTick = CurrentTick;
      }
      
      i = check_limit(i);
      led_display(i);
      if(ZC == 1)
      {
         delay_us(level[i]);
         output_high(TRIAC);
         delay_us(100);
         output_low(TRIAC);
         ZC = 0;
      }
   }

}
