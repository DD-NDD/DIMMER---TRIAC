CCS PCM C Compiler, Version 5.051, 5967               24-Oct-19 18:37

               Filename:   C:\Users\Duy Ngo\Desktop\DO AN THUE\Code\main.lst

               ROM used:   611 words (7%)
                           Largest free fragment is 2048
               RAM used:   50 (14%) at main() level
                           54 (15%) worst case
               Stack used: 1 locations (0 in main + 1 for interrupts)
               Stack size: 8

*
0000:  MOVLW  01
0001:  MOVWF  0A
0002:  GOTO   183
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BCF    03.7
0016:  BCF    03.5
0017:  BTFSS  0B.4
0018:  GOTO   01B
0019:  BTFSC  0B.1
001A:  GOTO   02C
001B:  MOVF   22,W
001C:  MOVWF  04
001D:  MOVF   23,W
001E:  MOVWF  77
001F:  MOVF   24,W
0020:  MOVWF  78
0021:  MOVF   25,W
0022:  MOVWF  79
0023:  MOVF   26,W
0024:  MOVWF  7A
0025:  MOVF   20,W
0026:  MOVWF  0A
0027:  SWAPF  21,W
0028:  MOVWF  03
0029:  SWAPF  7F,F
002A:  SWAPF  7F,W
002B:  RETFIE
002C:  BCF    0A.3
002D:  BCF    0A.4
002E:  GOTO   02F
.................... #include <main.h> 
.................... #include <16F886.h> 
.................... //////////// Standard Header file for the PIC16F886 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F886 
....................  
.................... #list 
....................  
.................... #device ADC=10 
.................... #use delay(internal=8000000) 
*
00F2:  MOVLW  4A
00F3:  MOVWF  04
00F4:  BCF    03.7
00F5:  MOVF   00,W
00F6:  BTFSC  03.2
00F7:  GOTO   105
00F8:  MOVLW  02
00F9:  MOVWF  78
00FA:  CLRF   77
00FB:  DECFSZ 77,F
00FC:  GOTO   0FB
00FD:  DECFSZ 78,F
00FE:  GOTO   0FA
00FF:  MOVLW  97
0100:  MOVWF  77
0101:  DECFSZ 77,F
0102:  GOTO   101
0103:  DECFSZ 00,F
0104:  GOTO   0F8
0105:  RETURN
*
0172:  MOVLW  08
0173:  SUBWF  4C,F
0174:  BTFSS  03.0
0175:  GOTO   182
0176:  MOVLW  4C
0177:  MOVWF  04
0178:  BCF    03.7
0179:  BCF    03.0
017A:  RRF    00,F
017B:  MOVF   00,W
017C:  BTFSC  03.2
017D:  GOTO   182
017E:  GOTO   180
017F:  NOP
0180:  DECFSZ 00,F
0181:  GOTO   17F
0182:  RETURN
.................... #use timer(tick=100us,bits=32,NOISR) 
*
003B:  BTFSS  0C.0
003C:  GOTO   047
003D:  MOVLW  01
003E:  ADDWF  27,F
003F:  BTFSC  03.0
0040:  INCF   28,F
0041:  BTFSC  03.2
0042:  INCF   29,F
0043:  BTFSC  03.2
0044:  INCF   2A,F
0045:  BCF    0C.0
0046:  GOTO   05B
0047:  MOVF   0F,W
0048:  MOVWF  7A
0049:  MOVF   0E,W
004A:  MOVWF  77
004B:  MOVF   0F,W
004C:  SUBWF  7A,W
004D:  BTFSS  03.2
004E:  GOTO   047
004F:  MOVF   77,W
0050:  BTFSS  0C.0
0051:  GOTO   064
0052:  MOVLW  01
0053:  ADDWF  27,F
0054:  BTFSC  03.0
0055:  INCF   28,F
0056:  BTFSC  03.2
0057:  INCF   29,F
0058:  BTFSC  03.2
0059:  INCF   2A,F
005A:  BCF    0C.0
005B:  MOVF   0F,W
005C:  MOVWF  7A
005D:  MOVF   0E,W
005E:  MOVWF  77
005F:  MOVF   0F,W
0060:  SUBWF  7A,W
0061:  BTFSS  03.2
0062:  GOTO   05B
0063:  MOVF   77,W
0064:  MOVWF  77
0065:  MOVF   7A,W
0066:  MOVWF  78
0067:  MOVF   27,W
0068:  MOVWF  79
0069:  MOVF   28,W
006A:  MOVWF  7A
006B:  MOVF   29,W
006C:  MOVWF  49
006D:  RRF    49,F
006E:  RRF    7A,F
006F:  RRF    79,F
0070:  RRF    78,F
0071:  RRF    77,F
0072:  RRF    49,F
0073:  RRF    7A,F
0074:  RRF    79,F
0075:  RRF    78,F
0076:  RRF    77,F
0077:  RRF    49,F
0078:  RRF    7A,F
0079:  RRF    79,F
007A:  RRF    78,F
007B:  RRF    77,F
007C:  RRF    49,F
007D:  RRF    7A,F
007E:  RRF    79,F
007F:  RRF    78,F
0080:  RRF    77,F
0081:  RRF    49,F
0082:  RRF    7A,F
0083:  RRF    79,F
0084:  RRF    78,F
0085:  RRF    77,F
0086:  RETURN
....................  
.................... #define TICK_TYPE unsigned int32 
.................... #use FIXED_IO( A_outputs=PIN_A7,PIN_A6 ) 
.................... #use FIXED_IO( B_outputs=PIN_B1 ) 
.................... #use FIXED_IO( C_outputs=PIN_C7,PIN_C6,PIN_C5,PIN_C4,PIN_C3,PIN_C2,PIN_C1,PIN_C0 ) 
.................... #define LED9   PIN_A6 
.................... #define LED10   PIN_A7 
.................... #define TRIAC   PIN_B1 
.................... #define LED1   PIN_C0 
.................... #define LED2   PIN_C1 
.................... #define LED3   PIN_C2 
.................... #define LED4   PIN_C3 
.................... #define LED5   PIN_C4 
.................... #define LED6   PIN_C5 
.................... #define LED7   PIN_C6 
.................... #define LED8   PIN_C7 
....................  
....................  
....................  
.................... #include <stdint.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... ////                           stdint.h                                //// 
.................... ////                                                                   //// 
.................... //// Standard integer definitions.                                     //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDINT 
....................  
.................... #define _STDINT 
....................  
.................... //////////// exact width 
....................  
.................... typedef signed int8 int8_t; 
.................... typedef unsigned int8 uint8_t; 
.................... typedef signed int16 int16_t; 
.................... typedef unsigned int16 uint16_t; 
.................... typedef signed int32 int32_t; 
.................... typedef unsigned int32 uint32_t; 
....................  
.................... #if defined(__PCD__) 
.................... //typedef signed int24 int24_t; 
.................... //typedef unsigned int24 uint24_t; 
.................... typedef signed int64 int64_t; 
.................... typedef unsigned int64 uint64_t; 
.................... #endif 
....................  
.................... #define INT8_MAX  (127) 
.................... #define INT8_MIN  (-128) 
.................... #define UINT8_MAX (255) 
....................  
.................... #define INT16_MAX  (32767) 
.................... #define INT16_MIN  (-32768) 
.................... #define UINT16_MAX (65535) 
....................  
.................... #define INT32_MAX  (2147483647) 
.................... #define INT32_MIN  (-2147483648) 
.................... #define UINT32_MAX (4294967295) 
....................  
.................... #if defined(__PCD__) 
.................... //#define INT24_MAX  (8388607) 
.................... //#define INT24_MIN  (-8388608) 
.................... //#define UINT24_MAX (16777215) 
....................  
.................... #define INT64_MAX  (9223372036854775807) 
.................... #define INT64_MIN  (-9223372036854775808) 
.................... #define UINT64_MAX (18446744073709551615) 
.................... #endif 
....................  
.................... ///////// minimum width 
....................  
.................... typedef signed int8 int_least8_t; 
.................... typedef unsigned int8 uint_least8_t; 
.................... typedef signed int16 int_least16_t; 
.................... typedef unsigned int16 uint_least16_t; 
.................... typedef signed int32 int_least32_t; 
.................... typedef unsigned int32 uint_least32_t; 
....................  
.................... #if defined(__PCD__) 
.................... //typedef signed int24 int_least24_t; 
.................... //typedef unsigned int24 uint_least24_t; 
.................... typedef signed int64 int_least64_t; 
.................... typedef unsigned int64 uint_least64_t; 
.................... #endif 
....................  
.................... #define INT_LEAST8_MAX  (127) 
.................... #define INT_LEAST8_MIN  (-128) 
.................... #define UINT_LEAST8_MAX (255) 
....................  
.................... #define INT_LEAST16_MAX  (32767) 
.................... #define INT_LEAST16_MIN  (-32768) 
.................... #define UINT_LEAST16_MAX (65535) 
....................  
.................... #define INT_LEAST32_MAX  (2147483647) 
.................... #define INT_LEAST32_MIN  (-2147483648) 
.................... #define UINT_LEAST32_MAX (4294967295) 
....................  
.................... #if defined(__PCD__) 
.................... //#define INT_LEAST24_MAX  (8388607) 
.................... //#define INT_LEAST24_MIN  (-8388608) 
.................... //#define UINT_LEAST24_MAX (16777215) 
....................  
.................... #define INT_LEAST64_MAX  (9223372036854775807) 
.................... #define INT_LEAST64_MIN  (-9223372036854775808) 
.................... #define UINT_LEAST64_MAX (18446744073709551615) 
.................... #endif 
....................  
.................... ///////// fastest width 
....................  
.................... #if defined(__PCD__) 
.................... typedef signed int16 int_fast8_t; 
.................... typedef unsigned int16 uint_fast8_t; 
.................... #define INT_FAST8_MAX  (32767) 
.................... #define INT_FAST8_MIN  (-32768) 
.................... #define UINT_FAST8_MAX (65535) 
.................... typedef signed int16 int_fast16_t; 
.................... typedef unsigned int16 uint_fast16_t; 
.................... //typedef signed int24 int_fast24_t; 
.................... //typedef unsigned int24 uint_fast24_t; 
.................... typedef signed int64 int_fast64_t; 
.................... typedef unsigned int64 uint_fast64_t; 
.................... #else 
.................... typedef signed int8 int_fast8_t; 
.................... typedef unsigned int8 uint_fast8_t; 
.................... #define INT_FAST8_MAX  (127) 
.................... #define INT_FAST8_MIN  (-128) 
.................... #define UINT_FAST8_MAX (255) 
.................... typedef signed int16 int_fast16_t; 
.................... typedef unsigned int16 uint_fast16_t; 
.................... #endif 
....................  
.................... typedef signed int32 int_fast32_t; 
.................... typedef unsigned int32 uint_fast32_t; 
....................  
.................... #define INT_FAST16_MAX  (32767) 
.................... #define INT_FAST16_MIN  (-32768) 
.................... #define UINT_FAST16_MAX (65535) 
....................  
.................... #define INT_FAST32_MAX  (2147483647) 
.................... #define INT_FAST32_MIN  (-2147483648) 
.................... #define UINT_FAST32_MAX (4294967295) 
....................  
.................... #if defined(__PCD__) 
.................... //#define INT_FAST24_MAX  (8388607) 
.................... //#define INT_FAST24_MIN  (-8388608) 
.................... //#define UINT_FAST24_MAX (16777215) 
....................  
.................... #define INT_FAST64_MAX  (9223372036854775807) 
.................... #define INT_FAST64_MIN  (-9223372036854775808) 
.................... #define UINT_FAST64_MAX (18446744073709551615) 
.................... #endif 
....................  
.................... //////////// big enough to hold pointers (OPTIONAL) 
....................  
.................... /// TODO 
....................  
.................... /// intptr_t uintptr_t 
....................  
.................... /// INTPTRN_MIN INTPTRN_MAX UINTPTRN_MAX 
....................  
....................  
.................... /////////// greatest width (OPTIONAL) 
....................  
.................... /// TODO 
....................  
.................... /// intmax_t uintmax_t 
....................  
.................... /// INTMAXN_MIN INTMAXN_MAX UINTMAXN_MAX 
....................  
.................... /// INTMAX_C(value) UINTMAX_C(value) 
....................  
....................  
.................... #endif 
....................  
.................... #include <stdbool.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... ////                          stdbool.h                                //// 
.................... ////                                                                   //// 
.................... //// Standard boolean definitions                                      //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2012 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __STDBOOL_H__ 
.................... #define __STDBOOL_H__ 
....................  
.................... //remove TRUE and FALSE added by CCS's device .h file 
.................... #if defined(TRUE) 
.................... #undef TRUE 
.................... #endif 
.................... #if defined(FALSE) 
.................... #undef FALSE 
.................... #endif 
....................  
.................... typedef int1   bool; 
.................... #define true   1 
.................... #define false  0 
.................... #define __bool_true_false_are_defined  1 
....................  
.................... #endif 
....................  
.................... #byte OPTION_REG = GETENV("SFR:OPTION_REG") 
.................... #bit  INTEDG = OPTION_REG.6 
.................... int1 ZC = 0; 
.................... unsigned int16 level[10] = {9000,8000,7000,6000,5000,4000,3000,2000,1000,0}; 
*
01AB:  MOVLW  28
01AC:  BCF    03.6
01AD:  MOVWF  2C
01AE:  MOVLW  23
01AF:  MOVWF  2D
01B0:  MOVLW  40
01B1:  MOVWF  2E
01B2:  MOVLW  1F
01B3:  MOVWF  2F
01B4:  MOVLW  58
01B5:  MOVWF  30
01B6:  MOVLW  1B
01B7:  MOVWF  31
01B8:  MOVLW  70
01B9:  MOVWF  32
01BA:  MOVLW  17
01BB:  MOVWF  33
01BC:  MOVLW  88
01BD:  MOVWF  34
01BE:  MOVLW  13
01BF:  MOVWF  35
01C0:  MOVLW  A0
01C1:  MOVWF  36
01C2:  MOVLW  0F
01C3:  MOVWF  37
01C4:  MOVLW  B8
01C5:  MOVWF  38
01C6:  MOVLW  0B
01C7:  MOVWF  39
01C8:  MOVLW  D0
01C9:  MOVWF  3A
01CA:  MOVLW  07
01CB:  MOVWF  3B
01CC:  MOVLW  E8
01CD:  MOVWF  3C
01CE:  MOVLW  03
01CF:  MOVWF  3D
01D0:  CLRF   3E
01D1:  CLRF   3F
.................... unsigned int8 i=0; 
.................... #define UP_SWITCH_PIN       PIN_B2 
.................... #define ON_OFF_SWITCH_PIN   PIN_B3 
.................... #define DOWN_SWITCH_PIN     PIN_B4 
.................... #define MODE_SWITCH_PIN      PIN_B5 
....................  
.................... #define HAND_MODE 0 
.................... #define AUTO_MODE 1 
.................... #define ON_STATE 1 
.................... #define OFF_STATE 0 
.................... bool UP_DOWN_AUTO = 0; 
.................... bool STATE = 0; 
.................... bool MODE = 0; 
.................... TICK_TYPE GetTickDifference(TICK_TYPE currTick, TICK_TYPE prevTick) 
.................... { 
....................    return(currTick-prevTick); 
*
00DA:  MOVF   4D,W
00DB:  SUBWF  49,W
00DC:  MOVWF  77
00DD:  MOVF   4A,W
00DE:  MOVWF  78
00DF:  MOVF   4E,W
00E0:  BTFSS  03.0
00E1:  INCFSZ 4E,W
00E2:  SUBWF  78,F
00E3:  MOVF   4B,W
00E4:  MOVWF  79
00E5:  MOVF   4F,W
00E6:  BTFSS  03.0
00E7:  INCFSZ 4F,W
00E8:  SUBWF  79,F
00E9:  MOVF   4C,W
00EA:  MOVWF  7A
00EB:  MOVF   50,W
00EC:  BTFSS  03.0
00ED:  INCFSZ 50,W
00EE:  SUBWF  7A,F
00EF:  BCF    0A.3
00F0:  BCF    0A.4
00F1:  GOTO   20D (RETURN)
.................... } 
.................... unsigned int8 check_limit(uint8_t level_check) 
.................... {   
....................    if(level_check <= 0 ) level_check = 0; 
*
0162:  MOVF   49,F
0163:  BTFSS  03.2
0164:  GOTO   167
0165:  CLRF   49
0166:  GOTO   16D
....................    else if(level_check >=9 ) level_check = 9; 
0167:  MOVF   49,W
0168:  SUBLW  08
0169:  BTFSC  03.0
016A:  GOTO   16D
016B:  MOVLW  09
016C:  MOVWF  49
....................     
....................    return level_check; 
016D:  MOVF   49,W
016E:  MOVWF  78
016F:  BCF    0A.3
0170:  BCF    0A.4
0171:  GOTO   232 (RETURN)
.................... } 
.................... void tick(void) 
.................... { 
....................    if(input(ON_OFF_SWITCH_PIN) == 0) // nut on off duoc nhan 
*
0106:  MOVLW  FD
0107:  BSF    03.5
0108:  MOVWF  06
0109:  BCF    03.5
010A:  BTFSC  06.3
010B:  GOTO   115
....................    { 
....................       STATE = !STATE; // dao nguoc trang thai on off 
010C:  MOVLW  04
010D:  XORWF  2B,F
....................       delay_ms(500); // delay 500ms 
010E:  MOVLW  02
010F:  MOVWF  49
0110:  MOVLW  FA
0111:  MOVWF  4A
0112:  CALL   0F2
0113:  DECFSZ 49,F
0114:  GOTO   110
....................    } 
....................     
....................    if(STATE == ON_STATE) // khi dang trong trang thai bat 
0115:  BTFSS  2B.2
0116:  GOTO   154
....................    { 
....................       output_high(LED10); 
0117:  MOVLW  3F
0118:  BSF    03.5
0119:  MOVWF  05
011A:  BCF    03.5
011B:  BSF    05.7
....................       if(input(MODE_SWITCH_PIN) == 0) // khi nut MODE duoc nhan 
011C:  MOVLW  FD
011D:  BSF    03.5
011E:  MOVWF  06
011F:  BCF    03.5
0120:  BTFSC  06.5
0121:  GOTO   12B
....................       { 
....................          MODE = !MODE; // dao nguoc trang thai nhan 
0122:  MOVLW  08
0123:  XORWF  2B,F
....................          delay_ms(500); 
0124:  MOVLW  02
0125:  MOVWF  49
0126:  MOVLW  FA
0127:  MOVWF  4A
0128:  CALL   0F2
0129:  DECFSZ 49,F
012A:  GOTO   126
....................       } 
....................        
....................       if(MODE == HAND_MODE) // khi che do bang tay 
012B:  BTFSC  2B.3
012C:  GOTO   141
....................       { 
....................          output_high(LED9); 
012D:  MOVLW  3F
012E:  BSF    03.5
012F:  MOVWF  05
0130:  BCF    03.5
0131:  BSF    05.6
....................          if( input(UP_SWITCH_PIN) == 0 ) // nut nhan tang 
0132:  MOVLW  FD
0133:  BSF    03.5
0134:  MOVWF  06
0135:  BCF    03.5
0136:  BTFSC  06.2
0137:  GOTO   13A
....................          { 
....................             i++;  // tang level 
0138:  INCF   40,F
....................          } 
0139:  GOTO   140
....................          else if( input(DOWN_SWITCH_PIN) == 0 ) // nhut nhan giam 
013A:  MOVLW  FD
013B:  BSF    03.5
013C:  MOVWF  06
013D:  BCF    03.5
013E:  BTFSS  06.4
....................          { 
....................             i--; // giam level 
013F:  DECF   40,F
....................          } 
....................       } 
0140:  GOTO   153
....................       else if(MODE == AUTO_MODE) // che do auto 
0141:  BTFSS  2B.3
0142:  GOTO   153
....................       { 
....................          output_low(LED9); 
0143:  MOVLW  3F
0144:  BSF    03.5
0145:  MOVWF  05
0146:  BCF    03.5
0147:  BCF    05.6
....................          if(UP_DOWN_AUTO == 1) // tu dong tang len 
0148:  BTFSS  2B.1
0149:  GOTO   150
....................          { 
....................             i++; 
014A:  INCF   40,F
....................             if(i >= 9) UP_DOWN_AUTO = 0; //dao chieu 
014B:  MOVF   40,W
014C:  SUBLW  08
014D:  BTFSS  03.0
014E:  BCF    2B.1
....................          } 
014F:  GOTO   153
....................          else //tu dong giam xuong 
....................          { 
....................             i--; 
0150:  DECFSZ 40,F
....................             if(i <= 0) UP_DOWN_AUTO = 1; // dao chieu 
0151:  GOTO   153
0152:  BSF    2B.1
....................          } 
....................       } 
....................    } 
0153:  GOTO   15F
....................    else if(STATE == OFF_STATE) // khi trang thai tat 
0154:  BTFSC  2B.2
0155:  GOTO   15F
....................    { 
....................       output_low(LED10); // tat den on off 
0156:  MOVLW  3F
0157:  BSF    03.5
0158:  MOVWF  05
0159:  BCF    03.5
015A:  BCF    05.7
....................       output_low(LED9); // tat den auto - hand 
015B:  BSF    03.5
015C:  MOVWF  05
015D:  BCF    03.5
015E:  BCF    05.6
....................    } 
015F:  BCF    0A.3
0160:  BCF    0A.4
0161:  GOTO   227 (RETURN)
.................... } 
....................  
.................... #INT_EXT 
.................... void  EXT_isr(void)  
.................... { 
....................     
....................    ZC = 1; 
*
002F:  BSF    2B.0
....................    if(INTEDG) INTEDG = 0; 
0030:  BSF    03.5
0031:  BTFSS  01.6
0032:  GOTO   035
0033:  BCF    01.6
0034:  GOTO   036
....................   else       INTEDG = 1; 
0035:  BSF    01.6
0036:  BCF    03.5
0037:  BCF    0B.1
0038:  BCF    0A.3
0039:  BCF    0A.4
003A:  GOTO   01B
.................... } 
.................... void led_display(uint8_t level) 
.................... { 
....................    switch(level) 
*
0087:  MOVF   49,W
0088:  XORLW  01
0089:  BTFSC  03.2
008A:  GOTO   0A4
008B:  XORLW  03
008C:  BTFSC  03.2
008D:  GOTO   0A9
008E:  XORLW  01
008F:  BTFSC  03.2
0090:  GOTO   0AF
0091:  XORLW  07
0092:  BTFSC  03.2
0093:  GOTO   0B5
0094:  XORLW  01
0095:  BTFSC  03.2
0096:  GOTO   0BB
0097:  XORLW  03
0098:  BTFSC  03.2
0099:  GOTO   0C1
009A:  XORLW  01
009B:  BTFSC  03.2
009C:  GOTO   0C7
009D:  XORLW  0F
009E:  BTFSC  03.2
009F:  GOTO   0CD
00A0:  XORLW  01
00A1:  BTFSC  03.2
00A2:  GOTO   0D3
00A3:  GOTO   0D9
....................    { 
....................       case 1: {output_c(0x00);break;} 
00A4:  BSF    03.5
00A5:  CLRF   07
00A6:  BCF    03.5
00A7:  CLRF   07
00A8:  GOTO   0D9
....................       case 2: {output_c(0x01);break;} 
00A9:  BSF    03.5
00AA:  CLRF   07
00AB:  MOVLW  01
00AC:  BCF    03.5
00AD:  MOVWF  07
00AE:  GOTO   0D9
....................       case 3: {output_c(0x03);break;} 
00AF:  BSF    03.5
00B0:  CLRF   07
00B1:  MOVLW  03
00B2:  BCF    03.5
00B3:  MOVWF  07
00B4:  GOTO   0D9
....................       case 4: {output_c(0x07);break;} 
00B5:  BSF    03.5
00B6:  CLRF   07
00B7:  MOVLW  07
00B8:  BCF    03.5
00B9:  MOVWF  07
00BA:  GOTO   0D9
....................       case 5: {output_c(0x0f);break;} 
00BB:  BSF    03.5
00BC:  CLRF   07
00BD:  MOVLW  0F
00BE:  BCF    03.5
00BF:  MOVWF  07
00C0:  GOTO   0D9
....................       case 6: {output_c(0x8f);break;} 
00C1:  BSF    03.5
00C2:  CLRF   07
00C3:  MOVLW  8F
00C4:  BCF    03.5
00C5:  MOVWF  07
00C6:  GOTO   0D9
....................       case 7: {output_c(0xCf);break;} 
00C7:  BSF    03.5
00C8:  CLRF   07
00C9:  MOVLW  CF
00CA:  BCF    03.5
00CB:  MOVWF  07
00CC:  GOTO   0D9
....................       case 8: {output_c(0xEf);break;} 
00CD:  BSF    03.5
00CE:  CLRF   07
00CF:  MOVLW  EF
00D0:  BCF    03.5
00D1:  MOVWF  07
00D2:  GOTO   0D9
....................       case 9: {output_c(0xff);break;} 
00D3:  BSF    03.5
00D4:  CLRF   07
00D5:  MOVLW  FF
00D6:  BCF    03.5
00D7:  MOVWF  07
00D8:  GOTO   0D9
....................       default: break; 
....................    } 
00D9:  RETURN
.................... } 
....................  
....................  
....................  
.................... void main() 
*
0183:  MOVF   03,W
0184:  ANDLW  1F
0185:  MOVWF  03
0186:  MOVLW  71
0187:  BSF    03.5
0188:  MOVWF  0F
0189:  CLRF   10
018A:  MOVF   0F,W
018B:  BCF    03.5
018C:  CLRF   2A
018D:  CLRF   29
018E:  CLRF   28
018F:  CLRF   27
0190:  MOVLW  B5
0191:  MOVWF  10
0192:  CLRF   0E
0193:  CLRF   0F
0194:  CLRF   0E
0195:  BCF    0C.0
0196:  BCF    2B.0
0197:  CLRF   40
0198:  BCF    2B.1
0199:  BCF    2B.2
019A:  BCF    2B.3
019B:  BSF    03.5
019C:  BSF    03.6
019D:  MOVF   09,W
019E:  ANDLW  C0
019F:  MOVWF  09
01A0:  BCF    03.6
01A1:  BCF    1F.4
01A2:  BCF    1F.5
01A3:  MOVLW  00
01A4:  BSF    03.6
01A5:  MOVWF  08
01A6:  BCF    03.5
01A7:  CLRF   07
01A8:  CLRF   08
01A9:  CLRF   09
01AA:  BCF    03.7
.................... { 
....................    TICK_TYPE CurrentTick,PreviousTick; // tao tick timer 
....................    CurrentTick = PreviousTick = get_ticks(); // lay tick timer 
*
01D2:  CALL   03B
01D3:  MOVF   7A,W
01D4:  MOVWF  48
01D5:  MOVF   79,W
01D6:  MOVWF  47
01D7:  MOVF   78,W
01D8:  MOVWF  46
01D9:  MOVF   77,W
01DA:  MOVWF  45
01DB:  MOVF   48,W
01DC:  MOVWF  44
01DD:  MOVF   47,W
01DE:  MOVWF  43
01DF:  MOVF   46,W
01E0:  MOVWF  42
01E1:  MOVF   45,W
01E2:  MOVWF  41
....................    enable_interrupts(INT_EXT); // bat ngat ngoai 
01E3:  BSF    0B.4
....................    enable_interrupts(GLOBAL); // bat ngat toan cuc 
01E4:  MOVLW  C0
01E5:  IORWF  0B,F
....................    STATE = OFF_STATE;   // state = off 
01E6:  BCF    2B.2
....................    MODE = AUTO_MODE; // mode = auto 
01E7:  BSF    2B.3
....................    output_low(LED10);   // tat led on off 
01E8:  MOVLW  3F
01E9:  BSF    03.5
01EA:  MOVWF  05
01EB:  BCF    03.5
01EC:  BCF    05.7
....................    output_low(LED9); // tat led auto - hand 
01ED:  BSF    03.5
01EE:  MOVWF  05
01EF:  BCF    03.5
01F0:  BCF    05.6
....................    led_display(0);   // hien thi den 
01F1:  CLRF   49
01F2:  CALL   087
....................    while(TRUE) 
....................    { 
....................       CurrentTick = get_ticks(); // doc tick timer 
01F3:  CALL   03B
01F4:  MOVF   7A,W
01F5:  MOVWF  44
01F6:  MOVF   79,W
01F7:  MOVWF  43
01F8:  MOVF   78,W
01F9:  MOVWF  42
01FA:  MOVF   77,W
01FB:  MOVWF  41
....................       if(GetTickDifference(CurrentTick, PreviousTick) >= ((TICK_TYPE)TICKS_PER_SECOND*100)/1000) // sau 100ms thi bat vao ngat de doc nut nhan 
01FC:  MOVF   44,W
01FD:  MOVWF  4C
01FE:  MOVF   43,W
01FF:  MOVWF  4B
0200:  MOVF   42,W
0201:  MOVWF  4A
0202:  MOVF   41,W
0203:  MOVWF  49
0204:  MOVF   48,W
0205:  MOVWF  50
0206:  MOVF   47,W
0207:  MOVWF  4F
0208:  MOVF   46,W
0209:  MOVWF  4E
020A:  MOVF   45,W
020B:  MOVWF  4D
020C:  GOTO   0DA
020D:  MOVF   7A,W
020E:  MOVWF  4C
020F:  MOVF   79,W
0210:  MOVWF  4B
0211:  MOVF   78,W
0212:  MOVWF  4A
0213:  MOVF   77,W
0214:  MOVWF  49
0215:  MOVF   4C,F
0216:  BTFSS  03.2
0217:  GOTO   226
0218:  MOVF   4B,F
0219:  BTFSS  03.2
021A:  GOTO   226
021B:  MOVF   4A,W
021C:  SUBLW  02
021D:  BTFSC  03.0
021E:  GOTO   22F
021F:  XORLW  FF
0220:  BTFSS  03.2
0221:  GOTO   226
0222:  MOVF   49,W
0223:  SUBLW  0C
0224:  BTFSC  03.0
0225:  GOTO   22F
....................       { 
....................          tick(); // ham xu ly chinh 
0226:  GOTO   106
....................          PreviousTick = CurrentTick; 
0227:  MOVF   44,W
0228:  MOVWF  48
0229:  MOVF   43,W
022A:  MOVWF  47
022B:  MOVF   42,W
022C:  MOVWF  46
022D:  MOVF   41,W
022E:  MOVWF  45
....................       } 
....................        
....................       i = check_limit(i); 
022F:  MOVF   40,W
0230:  MOVWF  49
0231:  GOTO   162
0232:  MOVF   78,W
0233:  MOVWF  40
....................       led_display(i); 
0234:  MOVF   40,W
0235:  MOVWF  49
0236:  CALL   087
....................       if(ZC == 1) 
0237:  BTFSS  2B.0
0238:  GOTO   261
....................       { 
....................          delay_us(level[i]); 
0239:  BCF    03.0
023A:  RLF    40,W
023B:  ADDLW  2C
023C:  MOVWF  04
023D:  BCF    03.7
023E:  INCF   04,F
023F:  MOVF   00,W
0240:  MOVWF  4A
0241:  DECF   04,F
0242:  MOVF   00,W
0243:  MOVWF  49
0244:  MOVF   4A,W
0245:  MOVWF  4B
0246:  INCF   4B,F
0247:  DECF   4B,F
0248:  BTFSC  03.2
0249:  GOTO   24E
024A:  MOVLW  FF
024B:  MOVWF  4C
024C:  CALL   172
024D:  GOTO   247
024E:  MOVF   49,W
024F:  MOVWF  4C
0250:  CALL   172
....................          output_high(TRIAC); 
0251:  MOVLW  FD
0252:  BSF    03.5
0253:  MOVWF  06
0254:  BCF    03.5
0255:  BSF    06.1
....................          delay_us(100); 
0256:  MOVLW  42
0257:  MOVWF  77
0258:  DECFSZ 77,F
0259:  GOTO   258
025A:  NOP
....................          output_low(TRIAC); 
025B:  MOVLW  FD
025C:  BSF    03.5
025D:  MOVWF  06
025E:  BCF    03.5
025F:  BCF    06.1
....................          ZC = 0; 
0260:  BCF    2B.0
....................       } 
0261:  GOTO   1F3
....................    } 
....................  
.................... } 
0262:  SLEEP

Configuration Fuses:
   Word  1: 2FE4   INTRC_IO NOWDT PUT MCLR NOPROTECT NOCPD BROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 0700   BORV40 NOWRT
